// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fito.proto

package fito;

public final class Fito {
  private Fito() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface HeartbeatOrBuilder extends
      // @@protoc_insertion_point(interface_extends:fito.Heartbeat)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required uint32 fwVersion = 1;</code>
     */
    boolean hasFwVersion();
    /**
     * <code>required uint32 fwVersion = 1;</code>
     */
    int getFwVersion();

    /**
     * <code>required .fito.Power power = 2;</code>
     */
    boolean hasPower();
    /**
     * <code>required .fito.Power power = 2;</code>
     */
    FitoCmd.Power getPower();

    /**
     * <code>required uint32 time = 3;</code>
     */
    boolean hasTime();
    /**
     * <code>required uint32 time = 3;</code>
     */
    int getTime();

    /**
     * <code>required uint32 program = 4;</code>
     */
    boolean hasProgram();
    /**
     * <code>required uint32 program = 4;</code>
     */
    int getProgram();
  }
  /**
   * <pre>
   * Сообщение идентификатор
   * </pre>
   *
   * Protobuf type {@code fito.Heartbeat}
   */
  public  static final class Heartbeat extends
      com.google.protobuf.GeneratedMessageLite<
          Heartbeat, Heartbeat.Builder> implements
      // @@protoc_insertion_point(message_implements:fito.Heartbeat)
      HeartbeatOrBuilder {
    private Heartbeat() {
    }
    private int bitField0_;
    public static final int FWVERSION_FIELD_NUMBER = 1;
    private int fwVersion_;
    /**
     * <code>required uint32 fwVersion = 1;</code>
     */
    public boolean hasFwVersion() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 fwVersion = 1;</code>
     */
    public int getFwVersion() {
      return fwVersion_;
    }
    /**
     * <code>required uint32 fwVersion = 1;</code>
     */
    private void setFwVersion(int value) {
      bitField0_ |= 0x00000001;
      fwVersion_ = value;
    }
    /**
     * <code>required uint32 fwVersion = 1;</code>
     */
    private void clearFwVersion() {
      bitField0_ = (bitField0_ & ~0x00000001);
      fwVersion_ = 0;
    }

    public static final int POWER_FIELD_NUMBER = 2;
    private FitoCmd.Power power_;
    /**
     * <code>required .fito.Power power = 2;</code>
     */
    public boolean hasPower() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .fito.Power power = 2;</code>
     */
    public FitoCmd.Power getPower() {
      return power_ == null ? FitoCmd.Power.getDefaultInstance() : power_;
    }
    /**
     * <code>required .fito.Power power = 2;</code>
     */
    private void setPower(FitoCmd.Power value) {
      if (value == null) {
        throw new NullPointerException();
      }
      power_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>required .fito.Power power = 2;</code>
     */
    private void setPower(
        FitoCmd.Power.Builder builderForValue) {
      power_ = builderForValue.build();
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>required .fito.Power power = 2;</code>
     */
    private void mergePower(FitoCmd.Power value) {
      if (power_ != null &&
          power_ != FitoCmd.Power.getDefaultInstance()) {
        power_ =
          FitoCmd.Power.newBuilder(power_).mergeFrom(value).buildPartial();
      } else {
        power_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>required .fito.Power power = 2;</code>
     */
    private void clearPower() {  power_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int TIME_FIELD_NUMBER = 3;
    private int time_;
    /**
     * <code>required uint32 time = 3;</code>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 time = 3;</code>
     */
    public int getTime() {
      return time_;
    }
    /**
     * <code>required uint32 time = 3;</code>
     */
    private void setTime(int value) {
      bitField0_ |= 0x00000004;
      time_ = value;
    }
    /**
     * <code>required uint32 time = 3;</code>
     */
    private void clearTime() {
      bitField0_ = (bitField0_ & ~0x00000004);
      time_ = 0;
    }

    public static final int PROGRAM_FIELD_NUMBER = 4;
    private int program_;
    /**
     * <code>required uint32 program = 4;</code>
     */
    public boolean hasProgram() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint32 program = 4;</code>
     */
    public int getProgram() {
      return program_;
    }
    /**
     * <code>required uint32 program = 4;</code>
     */
    private void setProgram(int value) {
      bitField0_ |= 0x00000008;
      program_ = value;
    }
    /**
     * <code>required uint32 program = 4;</code>
     */
    private void clearProgram() {
      bitField0_ = (bitField0_ & ~0x00000008);
      program_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, fwVersion_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getPower());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, time_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, program_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, fwVersion_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getPower());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, time_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, program_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static Heartbeat parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Heartbeat parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Heartbeat parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Heartbeat parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Heartbeat parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Heartbeat parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Heartbeat parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static Heartbeat parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Heartbeat parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Heartbeat parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Heartbeat prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Сообщение идентификатор
     * </pre>
     *
     * Protobuf type {@code fito.Heartbeat}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          Heartbeat, Builder> implements
        // @@protoc_insertion_point(builder_implements:fito.Heartbeat)
        HeartbeatOrBuilder {
      // Construct using fito.Fito.Heartbeat.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>required uint32 fwVersion = 1;</code>
       */
      public boolean hasFwVersion() {
        return instance.hasFwVersion();
      }
      /**
       * <code>required uint32 fwVersion = 1;</code>
       */
      public int getFwVersion() {
        return instance.getFwVersion();
      }
      /**
       * <code>required uint32 fwVersion = 1;</code>
       */
      public Builder setFwVersion(int value) {
        copyOnWrite();
        instance.setFwVersion(value);
        return this;
      }
      /**
       * <code>required uint32 fwVersion = 1;</code>
       */
      public Builder clearFwVersion() {
        copyOnWrite();
        instance.clearFwVersion();
        return this;
      }

      /**
       * <code>required .fito.Power power = 2;</code>
       */
      public boolean hasPower() {
        return instance.hasPower();
      }
      /**
       * <code>required .fito.Power power = 2;</code>
       */
      public FitoCmd.Power getPower() {
        return instance.getPower();
      }
      /**
       * <code>required .fito.Power power = 2;</code>
       */
      public Builder setPower(FitoCmd.Power value) {
        copyOnWrite();
        instance.setPower(value);
        return this;
        }
      /**
       * <code>required .fito.Power power = 2;</code>
       */
      public Builder setPower(
          FitoCmd.Power.Builder builderForValue) {
        copyOnWrite();
        instance.setPower(builderForValue);
        return this;
      }
      /**
       * <code>required .fito.Power power = 2;</code>
       */
      public Builder mergePower(FitoCmd.Power value) {
        copyOnWrite();
        instance.mergePower(value);
        return this;
      }
      /**
       * <code>required .fito.Power power = 2;</code>
       */
      public Builder clearPower() {  copyOnWrite();
        instance.clearPower();
        return this;
      }

      /**
       * <code>required uint32 time = 3;</code>
       */
      public boolean hasTime() {
        return instance.hasTime();
      }
      /**
       * <code>required uint32 time = 3;</code>
       */
      public int getTime() {
        return instance.getTime();
      }
      /**
       * <code>required uint32 time = 3;</code>
       */
      public Builder setTime(int value) {
        copyOnWrite();
        instance.setTime(value);
        return this;
      }
      /**
       * <code>required uint32 time = 3;</code>
       */
      public Builder clearTime() {
        copyOnWrite();
        instance.clearTime();
        return this;
      }

      /**
       * <code>required uint32 program = 4;</code>
       */
      public boolean hasProgram() {
        return instance.hasProgram();
      }
      /**
       * <code>required uint32 program = 4;</code>
       */
      public int getProgram() {
        return instance.getProgram();
      }
      /**
       * <code>required uint32 program = 4;</code>
       */
      public Builder setProgram(int value) {
        copyOnWrite();
        instance.setProgram(value);
        return this;
      }
      /**
       * <code>required uint32 program = 4;</code>
       */
      public Builder clearProgram() {
        copyOnWrite();
        instance.clearProgram();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:fito.Heartbeat)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new Heartbeat();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (!hasFwVersion()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (!hasPower()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (!hasTime()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (!hasProgram()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (!getPower().isInitialized()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          Heartbeat other = (Heartbeat) arg1;
          fwVersion_ = visitor.visitInt(
              hasFwVersion(), fwVersion_,
              other.hasFwVersion(), other.fwVersion_);
          power_ = visitor.visitMessage(power_, other.power_);
          time_ = visitor.visitInt(
              hasTime(), time_,
              other.hasTime(), other.time_);
          program_ = visitor.visitInt(
              hasProgram(), program_,
              other.hasProgram(), other.program_);
          if (visitor == MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  fwVersion_ = input.readUInt32();
                  break;
                }
                case 18: {
                  FitoCmd.Power.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    subBuilder = power_.toBuilder();
                  }
                  power_ = input.readMessage(FitoCmd.Power.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(power_);
                    power_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000002;
                  break;
                }
                case 24: {
                  bitField0_ |= 0x00000004;
                  time_ = input.readUInt32();
                  break;
                }
                case 32: {
                  bitField0_ |= 0x00000008;
                  program_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (Heartbeat.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:fito.Heartbeat)
    private static final Heartbeat DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Heartbeat();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static Heartbeat getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Heartbeat> PARSER;

    public static com.google.protobuf.Parser<Heartbeat> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface MessageUnionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:fito.MessageUnion)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required uint32 sysId = 1;</code>
     */
    boolean hasSysId();
    /**
     * <code>required uint32 sysId = 1;</code>
     */
    int getSysId();

    /**
     * <code>required uint32 targetId = 2 [default = 255];</code>
     */
    boolean hasTargetId();
    /**
     * <code>required uint32 targetId = 2 [default = 255];</code>
     */
    int getTargetId();

    /**
     * <code>optional .fito.Heartbeat heartbeat = 3;</code>
     */
    boolean hasHeartbeat();
    /**
     * <code>optional .fito.Heartbeat heartbeat = 3;</code>
     */
    Heartbeat getHeartbeat();

    /**
     * <code>optional .fito.Cmd cmd = 4;</code>
     */
    boolean hasCmd();
    /**
     * <code>optional .fito.Cmd cmd = 4;</code>
     */
    FitoCmd.Cmd getCmd();

    /**
     * <code>optional .fito.Param param = 5;</code>
     */
    boolean hasParam();
    /**
     * <code>optional .fito.Param param = 5;</code>
     */
    FitoParam.Param getParam();

    /**
     * <code>optional .fito.Error error = 6;</code>
     */
    boolean hasError();
    /**
     * <code>optional .fito.Error error = 6;</code>
     */
    FitoError.Error getError();

    /**
     * <code>optional .fito.Chanels chanels = 7;</code>
     */
    boolean hasChanels();
    /**
     * <code>optional .fito.Chanels chanels = 7;</code>
     */
    FitoChanels.Chanels getChanels();

    public MessageUnion.MsgCase getMsgCase();
  }
  /**
   * <pre>
   * Сообщение контейнер верхнего уровня
   * </pre>
   *
   * Protobuf type {@code fito.MessageUnion}
   */
  public  static final class MessageUnion extends
      com.google.protobuf.GeneratedMessageLite<
          MessageUnion, MessageUnion.Builder> implements
      // @@protoc_insertion_point(message_implements:fito.MessageUnion)
      MessageUnionOrBuilder {
    private MessageUnion() {
      targetId_ = 255;
    }
    private int bitField0_;
    private int msgCase_ = 0;
    private Object msg_;
    public enum MsgCase
        implements com.google.protobuf.Internal.EnumLite {
      HEARTBEAT(3),
      CMD(4),
      PARAM(5),
      ERROR(6),
      CHANELS(7),
      MSG_NOT_SET(0);
      private final int value;
      private MsgCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @Deprecated
      public static MsgCase valueOf(int value) {
        return forNumber(value);
      }

      public static MsgCase forNumber(int value) {
        switch (value) {
          case 3: return HEARTBEAT;
          case 4: return CMD;
          case 5: return PARAM;
          case 6: return ERROR;
          case 7: return CHANELS;
          case 0: return MSG_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MsgCase
    getMsgCase() {
      return MsgCase.forNumber(
          msgCase_);
    }

    private void clearMsg() {
      msgCase_ = 0;
      msg_ = null;
    }

    public static final int SYSID_FIELD_NUMBER = 1;
    private int sysId_;
    /**
     * <code>required uint32 sysId = 1;</code>
     */
    public boolean hasSysId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 sysId = 1;</code>
     */
    public int getSysId() {
      return sysId_;
    }
    /**
     * <code>required uint32 sysId = 1;</code>
     */
    private void setSysId(int value) {
      bitField0_ |= 0x00000001;
      sysId_ = value;
    }
    /**
     * <code>required uint32 sysId = 1;</code>
     */
    private void clearSysId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      sysId_ = 0;
    }

    public static final int TARGETID_FIELD_NUMBER = 2;
    private int targetId_;
    /**
     * <code>required uint32 targetId = 2 [default = 255];</code>
     */
    public boolean hasTargetId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 targetId = 2 [default = 255];</code>
     */
    public int getTargetId() {
      return targetId_;
    }
    /**
     * <code>required uint32 targetId = 2 [default = 255];</code>
     */
    private void setTargetId(int value) {
      bitField0_ |= 0x00000002;
      targetId_ = value;
    }
    /**
     * <code>required uint32 targetId = 2 [default = 255];</code>
     */
    private void clearTargetId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      targetId_ = 255;
    }

    public static final int HEARTBEAT_FIELD_NUMBER = 3;
    /**
     * <code>optional .fito.Heartbeat heartbeat = 3;</code>
     */
    public boolean hasHeartbeat() {
      return msgCase_ == 3;
    }
    /**
     * <code>optional .fito.Heartbeat heartbeat = 3;</code>
     */
    public Heartbeat getHeartbeat() {
      if (msgCase_ == 3) {
         return (Heartbeat) msg_;
      }
      return Heartbeat.getDefaultInstance();
    }
    /**
     * <code>optional .fito.Heartbeat heartbeat = 3;</code>
     */
    private void setHeartbeat(Heartbeat value) {
      if (value == null) {
        throw new NullPointerException();
      }
      msg_ = value;
      msgCase_ = 3;
    }
    /**
     * <code>optional .fito.Heartbeat heartbeat = 3;</code>
     */
    private void setHeartbeat(
        Heartbeat.Builder builderForValue) {
      msg_ = builderForValue.build();
      msgCase_ = 3;
    }
    /**
     * <code>optional .fito.Heartbeat heartbeat = 3;</code>
     */
    private void mergeHeartbeat(Heartbeat value) {
      if (msgCase_ == 3 &&
          msg_ != Heartbeat.getDefaultInstance()) {
        msg_ = Heartbeat.newBuilder((Heartbeat) msg_)
            .mergeFrom(value).buildPartial();
      } else {
        msg_ = value;
      }
      msgCase_ = 3;
    }
    /**
     * <code>optional .fito.Heartbeat heartbeat = 3;</code>
     */
    private void clearHeartbeat() {
      if (msgCase_ == 3) {
        msgCase_ = 0;
        msg_ = null;
      }
    }

    public static final int CMD_FIELD_NUMBER = 4;
    /**
     * <code>optional .fito.Cmd cmd = 4;</code>
     */
    public boolean hasCmd() {
      return msgCase_ == 4;
    }
    /**
     * <code>optional .fito.Cmd cmd = 4;</code>
     */
    public FitoCmd.Cmd getCmd() {
      if (msgCase_ == 4) {
         return (FitoCmd.Cmd) msg_;
      }
      return FitoCmd.Cmd.getDefaultInstance();
    }
    /**
     * <code>optional .fito.Cmd cmd = 4;</code>
     */
    private void setCmd(FitoCmd.Cmd value) {
      if (value == null) {
        throw new NullPointerException();
      }
      msg_ = value;
      msgCase_ = 4;
    }
    /**
     * <code>optional .fito.Cmd cmd = 4;</code>
     */
    private void setCmd(
        FitoCmd.Cmd.Builder builderForValue) {
      msg_ = builderForValue.build();
      msgCase_ = 4;
    }
    /**
     * <code>optional .fito.Cmd cmd = 4;</code>
     */
    private void mergeCmd(FitoCmd.Cmd value) {
      if (msgCase_ == 4 &&
          msg_ != FitoCmd.Cmd.getDefaultInstance()) {
        msg_ = FitoCmd.Cmd.newBuilder((FitoCmd.Cmd) msg_)
            .mergeFrom(value).buildPartial();
      } else {
        msg_ = value;
      }
      msgCase_ = 4;
    }
    /**
     * <code>optional .fito.Cmd cmd = 4;</code>
     */
    private void clearCmd() {
      if (msgCase_ == 4) {
        msgCase_ = 0;
        msg_ = null;
      }
    }

    public static final int PARAM_FIELD_NUMBER = 5;
    /**
     * <code>optional .fito.Param param = 5;</code>
     */
    public boolean hasParam() {
      return msgCase_ == 5;
    }
    /**
     * <code>optional .fito.Param param = 5;</code>
     */
    public FitoParam.Param getParam() {
      if (msgCase_ == 5) {
         return (FitoParam.Param) msg_;
      }
      return FitoParam.Param.getDefaultInstance();
    }
    /**
     * <code>optional .fito.Param param = 5;</code>
     */
    private void setParam(FitoParam.Param value) {
      if (value == null) {
        throw new NullPointerException();
      }
      msg_ = value;
      msgCase_ = 5;
    }
    /**
     * <code>optional .fito.Param param = 5;</code>
     */
    private void setParam(
        FitoParam.Param.Builder builderForValue) {
      msg_ = builderForValue.build();
      msgCase_ = 5;
    }
    /**
     * <code>optional .fito.Param param = 5;</code>
     */
    private void mergeParam(FitoParam.Param value) {
      if (msgCase_ == 5 &&
          msg_ != FitoParam.Param.getDefaultInstance()) {
        msg_ = FitoParam.Param.newBuilder((FitoParam.Param) msg_)
            .mergeFrom(value).buildPartial();
      } else {
        msg_ = value;
      }
      msgCase_ = 5;
    }
    /**
     * <code>optional .fito.Param param = 5;</code>
     */
    private void clearParam() {
      if (msgCase_ == 5) {
        msgCase_ = 0;
        msg_ = null;
      }
    }

    public static final int ERROR_FIELD_NUMBER = 6;
    /**
     * <code>optional .fito.Error error = 6;</code>
     */
    public boolean hasError() {
      return msgCase_ == 6;
    }
    /**
     * <code>optional .fito.Error error = 6;</code>
     */
    public FitoError.Error getError() {
      if (msgCase_ == 6) {
         return (FitoError.Error) msg_;
      }
      return FitoError.Error.getDefaultInstance();
    }
    /**
     * <code>optional .fito.Error error = 6;</code>
     */
    private void setError(FitoError.Error value) {
      if (value == null) {
        throw new NullPointerException();
      }
      msg_ = value;
      msgCase_ = 6;
    }
    /**
     * <code>optional .fito.Error error = 6;</code>
     */
    private void setError(
        FitoError.Error.Builder builderForValue) {
      msg_ = builderForValue.build();
      msgCase_ = 6;
    }
    /**
     * <code>optional .fito.Error error = 6;</code>
     */
    private void mergeError(FitoError.Error value) {
      if (msgCase_ == 6 &&
          msg_ != FitoError.Error.getDefaultInstance()) {
        msg_ = FitoError.Error.newBuilder((FitoError.Error) msg_)
            .mergeFrom(value).buildPartial();
      } else {
        msg_ = value;
      }
      msgCase_ = 6;
    }
    /**
     * <code>optional .fito.Error error = 6;</code>
     */
    private void clearError() {
      if (msgCase_ == 6) {
        msgCase_ = 0;
        msg_ = null;
      }
    }

    public static final int CHANELS_FIELD_NUMBER = 7;
    /**
     * <code>optional .fito.Chanels chanels = 7;</code>
     */
    public boolean hasChanels() {
      return msgCase_ == 7;
    }
    /**
     * <code>optional .fito.Chanels chanels = 7;</code>
     */
    public FitoChanels.Chanels getChanels() {
      if (msgCase_ == 7) {
         return (FitoChanels.Chanels) msg_;
      }
      return FitoChanels.Chanels.getDefaultInstance();
    }
    /**
     * <code>optional .fito.Chanels chanels = 7;</code>
     */
    private void setChanels(FitoChanels.Chanels value) {
      if (value == null) {
        throw new NullPointerException();
      }
      msg_ = value;
      msgCase_ = 7;
    }
    /**
     * <code>optional .fito.Chanels chanels = 7;</code>
     */
    private void setChanels(
        FitoChanels.Chanels.Builder builderForValue) {
      msg_ = builderForValue.build();
      msgCase_ = 7;
    }
    /**
     * <code>optional .fito.Chanels chanels = 7;</code>
     */
    private void mergeChanels(FitoChanels.Chanels value) {
      if (msgCase_ == 7 &&
          msg_ != FitoChanels.Chanels.getDefaultInstance()) {
        msg_ = FitoChanels.Chanels.newBuilder((FitoChanels.Chanels) msg_)
            .mergeFrom(value).buildPartial();
      } else {
        msg_ = value;
      }
      msgCase_ = 7;
    }
    /**
     * <code>optional .fito.Chanels chanels = 7;</code>
     */
    private void clearChanels() {
      if (msgCase_ == 7) {
        msgCase_ = 0;
        msg_ = null;
      }
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, sysId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, targetId_);
      }
      if (msgCase_ == 3) {
        output.writeMessage(3, (Heartbeat) msg_);
      }
      if (msgCase_ == 4) {
        output.writeMessage(4, (FitoCmd.Cmd) msg_);
      }
      if (msgCase_ == 5) {
        output.writeMessage(5, (FitoParam.Param) msg_);
      }
      if (msgCase_ == 6) {
        output.writeMessage(6, (FitoError.Error) msg_);
      }
      if (msgCase_ == 7) {
        output.writeMessage(7, (FitoChanels.Chanels) msg_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, sysId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, targetId_);
      }
      if (msgCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (Heartbeat) msg_);
      }
      if (msgCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (FitoCmd.Cmd) msg_);
      }
      if (msgCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (FitoParam.Param) msg_);
      }
      if (msgCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (FitoError.Error) msg_);
      }
      if (msgCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, (FitoChanels.Chanels) msg_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static MessageUnion parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static MessageUnion parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static MessageUnion parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static MessageUnion parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static MessageUnion parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static MessageUnion parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static MessageUnion parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static MessageUnion parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static MessageUnion parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static MessageUnion parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(MessageUnion prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Сообщение контейнер верхнего уровня
     * </pre>
     *
     * Protobuf type {@code fito.MessageUnion}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          MessageUnion, Builder> implements
        // @@protoc_insertion_point(builder_implements:fito.MessageUnion)
        MessageUnionOrBuilder {
      // Construct using fito.Fito.MessageUnion.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public MsgCase
          getMsgCase() {
        return instance.getMsgCase();
      }

      public Builder clearMsg() {
        copyOnWrite();
        instance.clearMsg();
        return this;
      }


      /**
       * <code>required uint32 sysId = 1;</code>
       */
      public boolean hasSysId() {
        return instance.hasSysId();
      }
      /**
       * <code>required uint32 sysId = 1;</code>
       */
      public int getSysId() {
        return instance.getSysId();
      }
      /**
       * <code>required uint32 sysId = 1;</code>
       */
      public Builder setSysId(int value) {
        copyOnWrite();
        instance.setSysId(value);
        return this;
      }
      /**
       * <code>required uint32 sysId = 1;</code>
       */
      public Builder clearSysId() {
        copyOnWrite();
        instance.clearSysId();
        return this;
      }

      /**
       * <code>required uint32 targetId = 2 [default = 255];</code>
       */
      public boolean hasTargetId() {
        return instance.hasTargetId();
      }
      /**
       * <code>required uint32 targetId = 2 [default = 255];</code>
       */
      public int getTargetId() {
        return instance.getTargetId();
      }
      /**
       * <code>required uint32 targetId = 2 [default = 255];</code>
       */
      public Builder setTargetId(int value) {
        copyOnWrite();
        instance.setTargetId(value);
        return this;
      }
      /**
       * <code>required uint32 targetId = 2 [default = 255];</code>
       */
      public Builder clearTargetId() {
        copyOnWrite();
        instance.clearTargetId();
        return this;
      }

      /**
       * <code>optional .fito.Heartbeat heartbeat = 3;</code>
       */
      public boolean hasHeartbeat() {
        return instance.hasHeartbeat();
      }
      /**
       * <code>optional .fito.Heartbeat heartbeat = 3;</code>
       */
      public Heartbeat getHeartbeat() {
        return instance.getHeartbeat();
      }
      /**
       * <code>optional .fito.Heartbeat heartbeat = 3;</code>
       */
      public Builder setHeartbeat(Heartbeat value) {
        copyOnWrite();
        instance.setHeartbeat(value);
        return this;
      }
      /**
       * <code>optional .fito.Heartbeat heartbeat = 3;</code>
       */
      public Builder setHeartbeat(
          Heartbeat.Builder builderForValue) {
        copyOnWrite();
        instance.setHeartbeat(builderForValue);
        return this;
      }
      /**
       * <code>optional .fito.Heartbeat heartbeat = 3;</code>
       */
      public Builder mergeHeartbeat(Heartbeat value) {
        copyOnWrite();
        instance.mergeHeartbeat(value);
        return this;
      }
      /**
       * <code>optional .fito.Heartbeat heartbeat = 3;</code>
       */
      public Builder clearHeartbeat() {
        copyOnWrite();
        instance.clearHeartbeat();
        return this;
      }

      /**
       * <code>optional .fito.Cmd cmd = 4;</code>
       */
      public boolean hasCmd() {
        return instance.hasCmd();
      }
      /**
       * <code>optional .fito.Cmd cmd = 4;</code>
       */
      public FitoCmd.Cmd getCmd() {
        return instance.getCmd();
      }
      /**
       * <code>optional .fito.Cmd cmd = 4;</code>
       */
      public Builder setCmd(FitoCmd.Cmd value) {
        copyOnWrite();
        instance.setCmd(value);
        return this;
      }
      /**
       * <code>optional .fito.Cmd cmd = 4;</code>
       */
      public Builder setCmd(
          FitoCmd.Cmd.Builder builderForValue) {
        copyOnWrite();
        instance.setCmd(builderForValue);
        return this;
      }
      /**
       * <code>optional .fito.Cmd cmd = 4;</code>
       */
      public Builder mergeCmd(FitoCmd.Cmd value) {
        copyOnWrite();
        instance.mergeCmd(value);
        return this;
      }
      /**
       * <code>optional .fito.Cmd cmd = 4;</code>
       */
      public Builder clearCmd() {
        copyOnWrite();
        instance.clearCmd();
        return this;
      }

      /**
       * <code>optional .fito.Param param = 5;</code>
       */
      public boolean hasParam() {
        return instance.hasParam();
      }
      /**
       * <code>optional .fito.Param param = 5;</code>
       */
      public FitoParam.Param getParam() {
        return instance.getParam();
      }
      /**
       * <code>optional .fito.Param param = 5;</code>
       */
      public Builder setParam(FitoParam.Param value) {
        copyOnWrite();
        instance.setParam(value);
        return this;
      }
      /**
       * <code>optional .fito.Param param = 5;</code>
       */
      public Builder setParam(
          FitoParam.Param.Builder builderForValue) {
        copyOnWrite();
        instance.setParam(builderForValue);
        return this;
      }
      /**
       * <code>optional .fito.Param param = 5;</code>
       */
      public Builder mergeParam(FitoParam.Param value) {
        copyOnWrite();
        instance.mergeParam(value);
        return this;
      }
      /**
       * <code>optional .fito.Param param = 5;</code>
       */
      public Builder clearParam() {
        copyOnWrite();
        instance.clearParam();
        return this;
      }

      /**
       * <code>optional .fito.Error error = 6;</code>
       */
      public boolean hasError() {
        return instance.hasError();
      }
      /**
       * <code>optional .fito.Error error = 6;</code>
       */
      public FitoError.Error getError() {
        return instance.getError();
      }
      /**
       * <code>optional .fito.Error error = 6;</code>
       */
      public Builder setError(FitoError.Error value) {
        copyOnWrite();
        instance.setError(value);
        return this;
      }
      /**
       * <code>optional .fito.Error error = 6;</code>
       */
      public Builder setError(
          FitoError.Error.Builder builderForValue) {
        copyOnWrite();
        instance.setError(builderForValue);
        return this;
      }
      /**
       * <code>optional .fito.Error error = 6;</code>
       */
      public Builder mergeError(FitoError.Error value) {
        copyOnWrite();
        instance.mergeError(value);
        return this;
      }
      /**
       * <code>optional .fito.Error error = 6;</code>
       */
      public Builder clearError() {
        copyOnWrite();
        instance.clearError();
        return this;
      }

      /**
       * <code>optional .fito.Chanels chanels = 7;</code>
       */
      public boolean hasChanels() {
        return instance.hasChanels();
      }
      /**
       * <code>optional .fito.Chanels chanels = 7;</code>
       */
      public FitoChanels.Chanels getChanels() {
        return instance.getChanels();
      }
      /**
       * <code>optional .fito.Chanels chanels = 7;</code>
       */
      public Builder setChanels(FitoChanels.Chanels value) {
        copyOnWrite();
        instance.setChanels(value);
        return this;
      }
      /**
       * <code>optional .fito.Chanels chanels = 7;</code>
       */
      public Builder setChanels(
          FitoChanels.Chanels.Builder builderForValue) {
        copyOnWrite();
        instance.setChanels(builderForValue);
        return this;
      }
      /**
       * <code>optional .fito.Chanels chanels = 7;</code>
       */
      public Builder mergeChanels(FitoChanels.Chanels value) {
        copyOnWrite();
        instance.mergeChanels(value);
        return this;
      }
      /**
       * <code>optional .fito.Chanels chanels = 7;</code>
       */
      public Builder clearChanels() {
        copyOnWrite();
        instance.clearChanels();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:fito.MessageUnion)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new MessageUnion();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (!hasSysId()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (!hasTargetId()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (hasHeartbeat()) {
            if (!getHeartbeat().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasCmd()) {
            if (!getCmd().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasParam()) {
            if (!getParam().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasError()) {
            if (!getError().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (hasChanels()) {
            if (!getChanels().isInitialized()) {
              if (shouldMemoize) {
                memoizedIsInitialized = 0;
              }
              return null;
            }
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          MessageUnion other = (MessageUnion) arg1;
          sysId_ = visitor.visitInt(
              hasSysId(), sysId_,
              other.hasSysId(), other.sysId_);
          targetId_ = visitor.visitInt(
              hasTargetId(), targetId_,
              other.hasTargetId(), other.targetId_);
          switch (other.getMsgCase()) {
            case HEARTBEAT: {
              msg_ = visitor.visitOneofMessage(
                  msgCase_ == 3,
                  msg_,
                  other.msg_);
              break;
            }
            case CMD: {
              msg_ = visitor.visitOneofMessage(
                  msgCase_ == 4,
                  msg_,
                  other.msg_);
              break;
            }
            case PARAM: {
              msg_ = visitor.visitOneofMessage(
                  msgCase_ == 5,
                  msg_,
                  other.msg_);
              break;
            }
            case ERROR: {
              msg_ = visitor.visitOneofMessage(
                  msgCase_ == 6,
                  msg_,
                  other.msg_);
              break;
            }
            case CHANELS: {
              msg_ = visitor.visitOneofMessage(
                  msgCase_ == 7,
                  msg_,
                  other.msg_);
              break;
            }
            case MSG_NOT_SET: {
              visitor.visitOneofNotSet(msgCase_ != 0);
              break;
            }
          }
          if (visitor == MergeFromVisitor
              .INSTANCE) {
            if (other.msgCase_ != 0) {
              msgCase_ = other.msgCase_;
            }
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  sysId_ = input.readUInt32();
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000002;
                  targetId_ = input.readUInt32();
                  break;
                }
                case 26: {
                  Heartbeat.Builder subBuilder = null;
                  if (msgCase_ == 3) {
                    subBuilder = ((Heartbeat) msg_).toBuilder();
                  }
                  msg_ =
                       input.readMessage(Heartbeat.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((Heartbeat) msg_);
                    msg_ = subBuilder.buildPartial();
                  }
                  msgCase_ = 3;
                  break;
                }
                case 34: {
                  FitoCmd.Cmd.Builder subBuilder = null;
                  if (msgCase_ == 4) {
                    subBuilder = ((FitoCmd.Cmd) msg_).toBuilder();
                  }
                  msg_ =
                       input.readMessage(FitoCmd.Cmd.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((FitoCmd.Cmd) msg_);
                    msg_ = subBuilder.buildPartial();
                  }
                  msgCase_ = 4;
                  break;
                }
                case 42: {
                  FitoParam.Param.Builder subBuilder = null;
                  if (msgCase_ == 5) {
                    subBuilder = ((FitoParam.Param) msg_).toBuilder();
                  }
                  msg_ =
                       input.readMessage(FitoParam.Param.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((FitoParam.Param) msg_);
                    msg_ = subBuilder.buildPartial();
                  }
                  msgCase_ = 5;
                  break;
                }
                case 50: {
                  FitoError.Error.Builder subBuilder = null;
                  if (msgCase_ == 6) {
                    subBuilder = ((FitoError.Error) msg_).toBuilder();
                  }
                  msg_ =
                       input.readMessage(FitoError.Error.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((FitoError.Error) msg_);
                    msg_ = subBuilder.buildPartial();
                  }
                  msgCase_ = 6;
                  break;
                }
                case 58: {
                  FitoChanels.Chanels.Builder subBuilder = null;
                  if (msgCase_ == 7) {
                    subBuilder = ((FitoChanels.Chanels) msg_).toBuilder();
                  }
                  msg_ =
                       input.readMessage(FitoChanels.Chanels.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((FitoChanels.Chanels) msg_);
                    msg_ = subBuilder.buildPartial();
                  }
                  msgCase_ = 7;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (MessageUnion.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:fito.MessageUnion)
    private static final MessageUnion DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new MessageUnion();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static MessageUnion getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<MessageUnion> PARSER;

    public static com.google.protobuf.Parser<MessageUnion> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
